[{"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\index.js":"1","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\App.js":"2","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\NavigationBar.js":"3","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalCategory.js":"4","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalReview.js":"5","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\ReviewPage.js":"6","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\HomePage.js":"7","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\CarrouselCategory.js":"8","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\Comment.js":"9","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Footer.js":"10","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Error404.js":"11"},{"size":160,"mtime":1618711715192,"results":"12","hashOfConfig":"13"},{"size":3640,"mtime":1618703774724,"results":"14","hashOfConfig":"13"},{"size":2377,"mtime":1618711368715,"results":"15","hashOfConfig":"13"},{"size":4735,"mtime":1618703774727,"results":"16","hashOfConfig":"13"},{"size":7570,"mtime":1618703774728,"results":"17","hashOfConfig":"13"},{"size":7370,"mtime":1618703774726,"results":"18","hashOfConfig":"13"},{"size":971,"mtime":1618631156243,"results":"19","hashOfConfig":"13"},{"size":2046,"mtime":1618631156241,"results":"20","hashOfConfig":"13"},{"size":3000,"mtime":1618703774725,"results":"21","hashOfConfig":"13"},{"size":462,"mtime":1618359292408,"results":"22","hashOfConfig":"13"},{"size":2909,"mtime":1618631156245,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1rdvdcp",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\index.js",[],["53","54"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\App.js",["55"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport NavigationBar from \"./components/common/NavigationBar\";\r\nimport Footer from \"./components/common/Footer\";\r\nimport HomePage from \"./components/HomePage\";\r\nimport ReviewPage from \"./components/ReviewPage\";\r\nimport Error404 from \"./components/common/Error404\";\r\n\r\nfunction App() {\r\n    const [arrayCategories, setArrayCategories] = useState([]);\r\n    const [arrayReviews, setArrayReviews] = useState([]);\r\n    const [refreshPage, setRefreshPage] = useState(true);\r\n    const [errors, setErrors] = useState(false);\r\n\r\n    const queryCategories = async () => {\r\n        const urlCategories = \"https://rolling-car-review.herokuapp.com/api/categories\";\r\n        try {\r\n            const queryCategories = await fetch(urlCategories);\r\n            const resCategories = await queryCategories.json();\r\n            setArrayCategories(resCategories);\r\n        } catch (err) {\r\n            setErrors(err);\r\n        }\r\n    };\r\n\r\n    const queryReviews = async () => {\r\n        const urlReviews = \"https://rolling-car-review.herokuapp.com/api/reviews\";\r\n        try {\r\n            const queryReviews = await fetch(urlReviews);\r\n            const resReviews = await queryReviews.json();\r\n            setArrayReviews(resReviews);\r\n        } catch (err) {\r\n            setErrors(err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (refreshPage) {\r\n            queryCategories();\r\n            queryReviews();\r\n            setRefreshPage(false);\r\n        }\r\n    }, [refreshPage]);\r\n\r\n    return (\r\n        <Router>\r\n            <NavigationBar\r\n                arrayCategories={arrayCategories}\r\n                arrayReviews={arrayReviews}\r\n                queryCategories={queryCategories}\r\n                queryReviews={queryReviews}\r\n            ></NavigationBar>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <section className=\"my-4\">\r\n                        <HomePage\r\n                            arrayCategories={arrayCategories}\r\n                            arrayReviews={arrayReviews}\r\n                        ></HomePage>\r\n                    </section>\r\n                </Route>\r\n                <Route\r\n                    exact\r\n                    path=\"/reviews/:id\"\r\n                    render={(props) => {\r\n                        const reviewLS = JSON.parse(localStorage.getItem('localReview'));\r\n                        let existLS = false;\r\n                        if (reviewLS) existLS = true;\r\n\r\n                        const reviewId = props.match.params.id;\r\n                        let selectedReview = {};\r\n\r\n                        existLS ? (selectedReview = reviewLS) : (selectedReview = arrayReviews.find(\r\n                            (review) => review._id === reviewId\r\n                        ))\r\n\r\n                        localStorage.setItem('localReview', JSON.stringify(selectedReview));\r\n                        return (\r\n                            <section className=\"my-4\">\r\n                                <ReviewPage\r\n                                    review={selectedReview}\r\n                                ></ReviewPage>\r\n                            </section>\r\n                        );\r\n                    }}\r\n                ></Route>\r\n                <Route exact path=\"*\">\r\n                    <Error404></Error404>\r\n                </Route>\r\n            </Switch>\r\n            <Footer></Footer>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\NavigationBar.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalCategory.js",["56"],"import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Modal, Button, Form, Row, Col, Container } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction ModalCategory(props) {\r\n    const [name, setName] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (name.trim() === \"\") {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: \"El campo no puede estar vac√≠o\",\r\n                timer: 1500,\r\n                showConfirmButton: false\r\n            });\r\n            return;\r\n        } else if (name.length < 4) {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: \"El campo debe tener al menos 3 caracteres\",\r\n                timer: 1500,\r\n                showConfirmButton: false\r\n            });\r\n            return;\r\n        } else {\r\n            const dataToSend = { name };\r\n            try {\r\n                const urlCategories = \"https://rolling-car-review.herokuapp.com/api/categories\";\r\n                const header = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(dataToSend)\r\n                };\r\n                const result = await fetch(\r\n                    urlCategories,\r\n                    header\r\n                );\r\n                const resultMsg = await result.json()\r\n\r\n                switch (result.status) {\r\n                    case 201:\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.queryCategories();\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    case 403:\r\n                        Swal.fire({\r\n                            icon: 'warning',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    default:\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'Algo pas√≥',\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        break;\r\n                }\r\n            } catch (error) {\r\n                Swal.fire(\r\n                    \"Ops...\",\r\n                    \"Ocurri√≥ un error, intente nuevamente\",\r\n                    \"error\"\r\n                );\r\n                setError(true);\r\n            }\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Agregar Categor√≠a\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Form>\r\n                        <Form.Group as={Row} controlId=\"formCategoria\">\r\n                            <Form.Label column sm={2}>\r\n                                Nombre\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ej: Ford\"\r\n                                    onChange={(e) => {\r\n                                        setName(e.target.value);\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"warning\" onClick={handleSubmit}>\r\n                    Agregar\r\n                </Button>\r\n                <Button variant=\"warning\" onClick={props.onHide}>\r\n                    Cerrar\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default withRouter(ModalCategory);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalReview.js",["57"],"import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Modal, Button, Form, Row, Col, Container } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction ModalReview(props) {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [url, setUrl] = useState(\"\");\r\n    const [thumbnail, setThumbnail] = useState(\"\");\r\n    const [categoryName, setCategoryName] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n\r\n    const arrayCategories = props.arrayCategories;\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (title.trim() === \"\" || url.trim() === \"\" || thumbnail.trim() === \"\" || categoryName.trim() === \"\") {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                html: '<h4>No puede dejar alg√∫n campo vac√≠o</h4>',\r\n                timer: 1500,\r\n                showConfirmButton: false\r\n            });\r\n            return;\r\n        } else {\r\n            const selectCategory = arrayCategories.find(\r\n                (getCategory) => getCategory.name === categoryName\r\n            );\r\n            const category = selectCategory.id;\r\n            const dataToSend = { title, url, thumbnail, category };\r\n\r\n            try {\r\n                const urlReviews = \"https://rolling-car-review.herokuapp.com/api/reviews\";\r\n                const header = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(dataToSend)\r\n                };\r\n                const result = await fetch(\r\n                    urlReviews,\r\n                    header\r\n                );\r\n                const resultMsg = await result.json()\r\n\r\n                switch (result.status) {\r\n                    case 201:\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.queryCategories();\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    case 403:\r\n                        Swal.fire({\r\n                            icon: 'warning',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    default:\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'Algo pas√≥',\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        break;\r\n                }\r\n            } catch (error) {\r\n                Swal.fire(\r\n                    \"Ops...\",\r\n                    \"Ocurri√≥ un error, intente nuevamente\",\r\n                    \"error\"\r\n                );\r\n                setError(true);\r\n            }\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Agregar Review\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Container>\r\n                    <Form>\r\n                        <Form.Group as={Row} controlId=\"reviewTitle\">\r\n                            <Form.Label column sm={2}>\r\n                                T√≠tulo\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ej: Ford EcoSport 2020\"\r\n                                    onChange={(e) => {\r\n                                        setTitle(e.target.value);\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"reviewUrl\">\r\n                            <Form.Label column sm={2}>\r\n                                URL\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ingrese una URL de YouTube\"\r\n                                    onChange={(e) => {\r\n                                        setUrl(e.target.value);\r\n                                    }}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    Una URL de YouTube tiene esta forma: https://www.youtube.com/embed/[video-id]\r\n                                </Form.Text>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"reviewThumbnail\">\r\n                            <Form.Label column sm={2}>\r\n                                Miniatura\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Utilice el ID del video de YouTube\"\r\n                                    onChange={(e) => {\r\n                                        setThumbnail(e.target.value);\r\n                                    }}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    Reemplace la id del video aqu√≠: https://img.youtube.com/vi/[video-id]/maxresdefault.jpg\r\n                                </Form.Text>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"reviewCategory\">\r\n                            <Form.Label column sm={2}>\r\n                                Categor√≠a\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ej: Ford\"\r\n                                    onChange={(e) => {\r\n                                        setCategoryName(e.target.value);\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"warning\" onClick={handleSubmit}>\r\n                    Agregar\r\n                </Button>\r\n                <Button variant=\"warning\" onClick={props.onHide}>\r\n                    Cerrar\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default withRouter(ModalReview);\r\n",["58","59"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\ReviewPage.js",["60","61","62"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { withRouter, useParams } from \"react-router-dom\";\r\nimport {\r\n    Container,\r\n    ResponsiveEmbed,\r\n    Button,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Jumbotron,\r\n} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\"\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction ReviewPage(props) {\r\n    const [thisReview, setThisReview] = useState(props.review);\r\n    const [refreshPage, setRefreshPage] = useState(true);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    \r\n    const { id } = useParams();\r\n    let posRealComment = 0;\r\n\r\n    const queryReview = async () => {\r\n        const urlThisReview = \"https://rolling-car-review.herokuapp.com/api/reviews/\" + id;\r\n        try {\r\n            const getReview = await fetch(urlThisReview);\r\n            const resReview = await getReview.json();\r\n            setThisReview(resReview);\r\n        } catch (err) {\r\n            setError(err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (refreshPage) {\r\n            queryReview();\r\n            setRefreshPage(false);\r\n        }\r\n    }, [refreshPage]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (username.trim() === \"\" || content.trim() === \"\") {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                html: \"<h4>No puede dejar alg√∫n campo vac√≠o</h4>\",\r\n                timer: 1500,\r\n                showConfirmButton: false,\r\n            });\r\n            return;\r\n        } else {\r\n            const dataToSend = { username, content };\r\n            try {\r\n                const urlReviews = \"https://rolling-car-review.herokuapp.com/api/reviews/\" + thisReview._id;\r\n                const header = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(dataToSend),\r\n                };\r\n                const result = await fetch(urlReviews, header);\r\n                const resultMsg = await result.json();\r\n\r\n                switch (result.status) {\r\n                    case 201:\r\n                        Swal.fire({\r\n                            icon: \"success\",\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false,\r\n                        });\r\n                        queryReview();\r\n                        props.history.push(\"/reviews/\" + thisReview._id);\r\n                        setUsername(\"\");\r\n                        setContent(\"\");\r\n                        break;\r\n                    case 403:\r\n                        Swal.fire({\r\n                            icon: \"warning\",\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false,\r\n                        });\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    default:\r\n                        Swal.fire({\r\n                            icon: \"error\",\r\n                            title: \"Error\",\r\n                            text: \"Algo pas√≥\",\r\n                            timer: 1500,\r\n                            showConfirmButton: false,\r\n                        });\r\n                        break;\r\n                }\r\n            } catch (error) {\r\n                Swal.fire(\r\n                    \"Ops...\",\r\n                    \"Ocurri√≥ un error, intente nuevamente\",\r\n                    \"error\"\r\n                );\r\n                setError(true);\r\n            }\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Container>\r\n                <div className=\"text-center pt-5 pb-2\">\r\n                    <p className=\"display-3\">\r\n                        <b>{thisReview.title}</b>\r\n                    </p>\r\n                </div>\r\n            </Container>\r\n            <Container className=\"py-5\">\r\n                <ResponsiveEmbed aspectRatio=\"16by9\" className=\"shadow-lg\">\r\n                    <embed src={thisReview.url} />\r\n                </ResponsiveEmbed>\r\n            </Container>\r\n            <Container className=\"py-2\">\r\n                <Button className=\"shadow\" size=\"sm\" variant=\"secondary\" disabled>\r\n                    {thisReview.category.name}\r\n                </Button>\r\n            </Container>\r\n            <Container>\r\n                <Jumbotron className=\"py-3 shadow-sm\">\r\n                    <h3 className=\"pb-2\">D√©jenos un comentario!</h3>\r\n                    <Form>\r\n                        <Form.Group as={Row} controlId=\"commentUsername\">\r\n                            <Form.Label column sm={2} size=\"sm\">\r\n                                Nombre:\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    size=\"sm\"\r\n                                    placeholder=\"Ej: ComandanteFort123\"\r\n                                    onChange={(e) => {\r\n                                        setUsername(e.target.value);\r\n                                    }}\r\n                                    value={username}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"commentContent\">\r\n                            <Form.Label column sm={2} size=\"sm\">\r\n                                Mensaje:\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    size=\"sm\"\r\n                                    placeholder=\"Escriba aqu√≠ su mensaje\"\r\n                                    rows={2}\r\n                                    onChange={(e) => {\r\n                                        setContent(e.target.value);\r\n                                    }}\r\n                                    value={content}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Button type=\"submit\" variant=\"warning\" onClick={handleSubmit}>\r\n                            Comentar\r\n                        </Button>\r\n                    </Form>\r\n                </Jumbotron>\r\n            </Container>\r\n            {thisReview.comments.map((oneComment, pos) => {\r\n                if (!oneComment.isDeleted) {\r\n                    posRealComment += 1;\r\n                    return (\r\n                        <Comment \r\n                            key={pos} \r\n                            comment={oneComment}\r\n                            index={posRealComment}\r\n                            queryReview={queryReview}\r\n                            idReview={thisReview._id}\r\n                            className=\"shadow-sm\"\r\n                        ></Comment>\r\n                    );\r\n                }\r\n            })}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(ReviewPage);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\HomePage.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\CarrouselCategory.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\Comment.js",["63","64","65"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Container, Row, Col, Jumbotron, Button } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction Comment(props) {\r\n    const [comment, setComment] = useState(props.comment);\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleClick = async (e) => {\r\n        e.preventDefault();\r\n        const dataToSend = comment;\r\n\r\n        try {\r\n            const urlReviews = \"https://rolling-car-review.herokuapp.com/api/comments/\" + comment._id;\r\n            const header = {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(dataToSend)\r\n            };\r\n            const result = await fetch(urlReviews, header);\r\n            const resultMsg = await result.json();\r\n\r\n            switch (result.status) {\r\n                case 200:\r\n                    Swal.fire({\r\n                        icon: \"success\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.queryReview();\r\n                    props.history.push(\"/reviews/\" + props.idReview);\r\n                    break;\r\n                case 404:\r\n                    Swal.fire({\r\n                        icon: \"warning\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.history.push(\"/\");\r\n                    break;\r\n                default:\r\n                    Swal.fire({\r\n                        icon: \"error\",\r\n                        title: \"Error\",\r\n                        text: \"Algo pas√≥\",\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            Swal.fire(\r\n                \"Ops...\",\r\n                \"Ocurri√≥ un error, intente nuevamente\",\r\n                \"error\"\r\n            );\r\n            setError(true);\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Jumbotron className=\"py-3\">\r\n                    <Row>\r\n                        <Col sm={2}><b>#{props.index} - {comment.username}</b></Col>\r\n                        <Col sm={9}>{comment.content}</Col>\r\n                        <Col sm={1}>\r\n                            <Button variant=\"danger\" size=\"sm\" onClick={handleClick}>\r\n                                <span role=\"img\" aria-label=\"\">üóëÔ∏è</span>\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Jumbotron>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Comment);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Footer.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Error404.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":16,"column":12,"nodeType":"72","messageId":"73","endLine":16,"endColumn":18},{"ruleId":"70","severity":1,"message":"74","line":8,"column":12,"nodeType":"72","messageId":"73","endLine":8,"endColumn":17},{"ruleId":"70","severity":1,"message":"74","line":11,"column":12,"nodeType":"72","messageId":"73","endLine":11,"endColumn":17},{"ruleId":"66","replacedBy":"75"},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","severity":1,"message":"74","line":20,"column":12,"nodeType":"72","messageId":"73","endLine":20,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":41,"column":8,"nodeType":"79","endLine":41,"endColumn":21,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":174,"column":56,"nodeType":"83","messageId":"84","endLine":174,"endColumn":58},{"ruleId":"70","severity":1,"message":"85","line":1,"column":27,"nodeType":"72","messageId":"73","endLine":1,"endColumn":36},{"ruleId":"70","severity":1,"message":"86","line":7,"column":21,"nodeType":"72","messageId":"73","endLine":7,"endColumn":31},{"ruleId":"70","severity":1,"message":"74","line":8,"column":12,"nodeType":"72","messageId":"73","endLine":8,"endColumn":17},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.",["87"],["88"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'queryReview'. Either include it or remove the dependency array.","ArrayExpression",["89"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'setComment' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},"Update the dependencies array to be: [queryReview, refreshPage]",{"range":"92","text":"93"},[1204,1217],"[queryReview, refreshPage]"]