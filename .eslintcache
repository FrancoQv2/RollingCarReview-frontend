[{"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\index.js":"1","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\App.js":"2","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\NavigationBar.js":"3","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalCategory.js":"4","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalReview.js":"5","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\ReviewPage.js":"6","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\HomePage.js":"7","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\CarrouselCategory.js":"8","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\Comment.js":"9","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Footer.js":"10","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Error404.js":"11"},{"size":160,"mtime":1618861796165,"results":"12","hashOfConfig":"13"},{"size":3761,"mtime":1618861502432,"results":"14","hashOfConfig":"13"},{"size":2403,"mtime":1618860836079,"results":"15","hashOfConfig":"13"},{"size":4735,"mtime":1618703774727,"results":"16","hashOfConfig":"13"},{"size":7570,"mtime":1618703774728,"results":"17","hashOfConfig":"13"},{"size":9526,"mtime":1618861995048,"results":"18","hashOfConfig":"13"},{"size":1029,"mtime":1618861079312,"results":"19","hashOfConfig":"13"},{"size":4466,"mtime":1618861667461,"results":"20","hashOfConfig":"13"},{"size":3234,"mtime":1618854044408,"results":"21","hashOfConfig":"13"},{"size":839,"mtime":1618861107804,"results":"22","hashOfConfig":"13"},{"size":2909,"mtime":1618631156245,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9ruu3t",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\index.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\App.js",["50"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\NavigationBar.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalCategory.js",["51"],"import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Modal, Button, Form, Row, Col, Container } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction ModalCategory(props) {\r\n    const [name, setName] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (name.trim() === \"\") {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: \"El campo no puede estar vacío\",\r\n                timer: 1500,\r\n                showConfirmButton: false\r\n            });\r\n            return;\r\n        } else if (name.length < 4) {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: \"El campo debe tener al menos 3 caracteres\",\r\n                timer: 1500,\r\n                showConfirmButton: false\r\n            });\r\n            return;\r\n        } else {\r\n            const dataToSend = { name };\r\n            try {\r\n                const urlCategories = \"https://rolling-car-review.herokuapp.com/api/categories\";\r\n                const header = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(dataToSend)\r\n                };\r\n                const result = await fetch(\r\n                    urlCategories,\r\n                    header\r\n                );\r\n                const resultMsg = await result.json()\r\n\r\n                switch (result.status) {\r\n                    case 201:\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.queryCategories();\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    case 403:\r\n                        Swal.fire({\r\n                            icon: 'warning',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    default:\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'Algo pasó',\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        break;\r\n                }\r\n            } catch (error) {\r\n                Swal.fire(\r\n                    \"Ops...\",\r\n                    \"Ocurrió un error, intente nuevamente\",\r\n                    \"error\"\r\n                );\r\n                setError(true);\r\n            }\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Agregar Categoría\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Form>\r\n                        <Form.Group as={Row} controlId=\"formCategoria\">\r\n                            <Form.Label column sm={2}>\r\n                                Nombre\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ej: Ford\"\r\n                                    onChange={(e) => {\r\n                                        setName(e.target.value);\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"warning\" onClick={handleSubmit}>\r\n                    Agregar\r\n                </Button>\r\n                <Button variant=\"warning\" onClick={props.onHide}>\r\n                    Cerrar\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default withRouter(ModalCategory);\r\n",["52","53"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalReview.js",["54"],"import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Modal, Button, Form, Row, Col, Container } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction ModalReview(props) {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [url, setUrl] = useState(\"\");\r\n    const [thumbnail, setThumbnail] = useState(\"\");\r\n    const [categoryName, setCategoryName] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n\r\n    const arrayCategories = props.arrayCategories;\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (title.trim() === \"\" || url.trim() === \"\" || thumbnail.trim() === \"\" || categoryName.trim() === \"\") {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: 'error',\r\n                html: '<h4>No puede dejar algún campo vacío</h4>',\r\n                timer: 1500,\r\n                showConfirmButton: false\r\n            });\r\n            return;\r\n        } else {\r\n            const selectCategory = arrayCategories.find(\r\n                (getCategory) => getCategory.name === categoryName\r\n            );\r\n            const category = selectCategory.id;\r\n            const dataToSend = { title, url, thumbnail, category };\r\n\r\n            try {\r\n                const urlReviews = \"https://rolling-car-review.herokuapp.com/api/reviews\";\r\n                const header = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(dataToSend)\r\n                };\r\n                const result = await fetch(\r\n                    urlReviews,\r\n                    header\r\n                );\r\n                const resultMsg = await result.json()\r\n\r\n                switch (result.status) {\r\n                    case 201:\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.queryCategories();\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    case 403:\r\n                        Swal.fire({\r\n                            icon: 'warning',\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    default:\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'Algo pasó',\r\n                            timer: 1500,\r\n                            showConfirmButton: false\r\n                        });\r\n                        break;\r\n                }\r\n            } catch (error) {\r\n                Swal.fire(\r\n                    \"Ops...\",\r\n                    \"Ocurrió un error, intente nuevamente\",\r\n                    \"error\"\r\n                );\r\n                setError(true);\r\n            }\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Agregar Review\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Container>\r\n                    <Form>\r\n                        <Form.Group as={Row} controlId=\"reviewTitle\">\r\n                            <Form.Label column sm={2}>\r\n                                Título\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ej: Ford EcoSport 2020\"\r\n                                    onChange={(e) => {\r\n                                        setTitle(e.target.value);\r\n                                    }}\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"reviewUrl\">\r\n                            <Form.Label column sm={2}>\r\n                                URL\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ingrese una URL de YouTube\"\r\n                                    onChange={(e) => {\r\n                                        setUrl(e.target.value);\r\n                                    }}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    Una URL de YouTube tiene esta forma: https://www.youtube.com/embed/[video-id]\r\n                                </Form.Text>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"reviewThumbnail\">\r\n                            <Form.Label column sm={2}>\r\n                                Miniatura\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Utilice el ID del video de YouTube\"\r\n                                    onChange={(e) => {\r\n                                        setThumbnail(e.target.value);\r\n                                    }}\r\n                                />\r\n                                <Form.Text className=\"text-muted\">\r\n                                    Reemplace la id del video aquí: https://img.youtube.com/vi/[video-id]/maxresdefault.jpg\r\n                                </Form.Text>\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"reviewCategory\">\r\n                            <Form.Label column sm={2}>\r\n                                Categoría\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Ej: Ford\"\r\n                                    onChange={(e) => {\r\n                                        setCategoryName(e.target.value);\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"warning\" onClick={handleSubmit}>\r\n                    Agregar\r\n                </Button>\r\n                <Button variant=\"warning\" onClick={props.onHide}>\r\n                    Cerrar\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default withRouter(ModalReview);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\ReviewPage.js",["55","56"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\HomePage.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\CarrouselCategory.js",["57"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\Comment.js",["58","59","60"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Container, Row, Col, Jumbotron, Button } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction Comment(props) {\r\n    const [comment, setComment] = useState(props.comment);\r\n    const [error, setError] = useState(false);\r\n\r\n    const deleteComment = async (e) => {\r\n        e.preventDefault();\r\n        const dataToSend = comment;\r\n\r\n        try {\r\n            const urlReviews = \"https://rolling-car-review.herokuapp.com/api/comments/\" + comment._id;\r\n            const header = {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(dataToSend)\r\n            };\r\n            const result = await fetch(urlReviews, header);\r\n            const resultMsg = await result.json();\r\n\r\n            switch (result.status) {\r\n                case 200:\r\n                    Swal.fire({\r\n                        icon: \"success\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.queryReview();\r\n                    props.history.push(\"/reviews/\" + props.idReview);\r\n                    break;\r\n                case 404:\r\n                    Swal.fire({\r\n                        icon: \"warning\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.history.push(\"/\");\r\n                    break;\r\n                default:\r\n                    Swal.fire({\r\n                        icon: \"error\",\r\n                        title: \"Error\",\r\n                        text: \"Algo pasó\",\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            Swal.fire(\r\n                \"Ops...\",\r\n                \"Ocurrió un error, intente nuevamente\",\r\n                \"error\"\r\n            );\r\n            setError(true);\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Jumbotron className=\"py-3\">\r\n                    <Row>\r\n                        <Col sm={2}>\r\n                            <Row><b>#{props.index+1} - {comment.username}</b></Row>\r\n                            <Row>{comment.createdAt.substring(0,10)}</Row>\r\n                            {/* <Row>{comment.createdAt.substring(11,19)}</Row> */}\r\n                        </Col>\r\n                        <Col sm={9}>{comment.content}</Col>\r\n                        <Col sm={1}>\r\n                            <Button variant=\"danger\" size=\"sm\" onClick={deleteComment}>\r\n                                <span role=\"img\" aria-label=\"\">🗑️</span>\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Jumbotron>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Comment);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Footer.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Error404.js",[],{"ruleId":"61","severity":1,"message":"62","line":16,"column":12,"nodeType":"63","messageId":"64","endLine":16,"endColumn":18},{"ruleId":"61","severity":1,"message":"65","line":8,"column":12,"nodeType":"63","messageId":"64","endLine":8,"endColumn":17},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"61","severity":1,"message":"65","line":11,"column":12,"nodeType":"63","messageId":"64","endLine":11,"endColumn":17},{"ruleId":"61","severity":1,"message":"65","line":20,"column":12,"nodeType":"63","messageId":"64","endLine":20,"endColumn":17},{"ruleId":"70","severity":1,"message":"71","line":40,"column":8,"nodeType":"72","endLine":40,"endColumn":21,"suggestions":"73"},{"ruleId":"61","severity":1,"message":"65","line":11,"column":12,"nodeType":"63","messageId":"64","endLine":11,"endColumn":17},{"ruleId":"61","severity":1,"message":"74","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"75","line":7,"column":21,"nodeType":"63","messageId":"64","endLine":7,"endColumn":31},{"ruleId":"61","severity":1,"message":"65","line":8,"column":12,"nodeType":"63","messageId":"64","endLine":8,"endColumn":17},"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'queryReview'. Either include it or remove the dependency array.","ArrayExpression",["78"],"'useEffect' is defined but never used.","'setComment' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [queryReview, refreshPage]",{"range":"81","text":"82"},[1175,1188],"[queryReview, refreshPage]"]