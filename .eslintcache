[{"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\index.js":"1","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\App.js":"2","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\NavigationBar.js":"3","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalCategory.js":"4","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalReview.js":"5","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\ReviewPage.js":"6","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\HomePage.js":"7","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\CarrouselCategory.js":"8","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\Comment.js":"9","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Footer.js":"10","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Error404.js":"11"},{"size":160,"mtime":1618861796165,"results":"12","hashOfConfig":"13"},{"size":3761,"mtime":1618863037588,"results":"14","hashOfConfig":"13"},{"size":2454,"mtime":1618872517515,"results":"15","hashOfConfig":"13"},{"size":4735,"mtime":1618872913866,"results":"16","hashOfConfig":"13"},{"size":7177,"mtime":1618872363146,"results":"17","hashOfConfig":"13"},{"size":9526,"mtime":1618863037591,"results":"18","hashOfConfig":"13"},{"size":1029,"mtime":1618863037590,"results":"19","hashOfConfig":"13"},{"size":4466,"mtime":1618863037589,"results":"20","hashOfConfig":"13"},{"size":3234,"mtime":1618854044408,"results":"21","hashOfConfig":"13"},{"size":839,"mtime":1618863037592,"results":"22","hashOfConfig":"13"},{"size":2909,"mtime":1618631156245,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"9ruu3t",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\index.js",[],["51","52"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\App.js",["53"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport NavigationBar from \"./components/common/NavigationBar\";\r\nimport Footer from \"./components/common/Footer\";\r\nimport HomePage from \"./components/HomePage\";\r\nimport ReviewPage from \"./components/ReviewPage\";\r\nimport Error404 from \"./components/common/Error404\";\r\n\r\nfunction App() {\r\n    const [arrayCategories, setArrayCategories] = useState([]);\r\n    const [arrayReviews, setArrayReviews] = useState([]);\r\n    const [refreshPage, setRefreshPage] = useState(true);\r\n    const [errors, setErrors] = useState(false);\r\n\r\n    const queryCategories = async () => {\r\n        const urlCategories = \"https://rolling-car-review.herokuapp.com/api/categories\";\r\n        try {\r\n            const queryCategories = await fetch(urlCategories);\r\n            const resCategories = await queryCategories.json();\r\n            setArrayCategories(resCategories);\r\n        } catch (err) {\r\n            setErrors(err);\r\n        }\r\n    };\r\n\r\n    const queryReviews = async () => {\r\n        const urlReviews = \"https://rolling-car-review.herokuapp.com/api/reviews\";\r\n        try {\r\n            const queryReviews = await fetch(urlReviews);\r\n            const resReviews = await queryReviews.json();\r\n            setArrayReviews(resReviews);\r\n        } catch (err) {\r\n            setErrors(err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (refreshPage) {\r\n            queryCategories();\r\n            queryReviews();\r\n            setRefreshPage(false);\r\n        }\r\n    }, [refreshPage]);\r\n\r\n    return (\r\n        <Router>\r\n            <NavigationBar\r\n                arrayCategories={arrayCategories}\r\n                arrayReviews={arrayReviews}\r\n                queryCategories={queryCategories}\r\n                queryReviews={queryReviews}\r\n            ></NavigationBar>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <section className=\"background\">\r\n                        <HomePage\r\n                            className=\"my-4\"\r\n                            arrayCategories={arrayCategories}\r\n                            arrayReviews={arrayReviews}\r\n                            queryCategories={queryCategories}\r\n                        ></HomePage>\r\n                    </section>\r\n                </Route>\r\n                <Route\r\n                    exact\r\n                    path=\"/reviews/:id\"\r\n                    render={(props) => {\r\n                        const reviewLS = JSON.parse(localStorage.getItem('localReview'));\r\n                        let existLS = false;\r\n                        if (reviewLS) existLS = true;\r\n\r\n                        const reviewId = props.match.params.id;\r\n                        let selectedReview = {};\r\n\r\n                        existLS ? (selectedReview = reviewLS) : (selectedReview = arrayReviews.find(\r\n                            (review) => review._id === reviewId\r\n                        ))\r\n\r\n                        localStorage.setItem('localReview', JSON.stringify(selectedReview));\r\n                        return (\r\n                            <section className=\"background\">\r\n                                <ReviewPage\r\n                                    review={selectedReview}\r\n                                ></ReviewPage>\r\n                            </section>\r\n                        );\r\n                    }}\r\n                ></Route>\r\n                <Route exact path=\"*\">\r\n                    <Error404></Error404>\r\n                </Route>\r\n            </Switch>\r\n            <Footer></Footer>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\NavigationBar.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalCategory.js",["54"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\ModalReview.js",["55"],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\ReviewPage.js",["56","57"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { withRouter, useParams } from \"react-router-dom\";\r\nimport {\r\n    Container,\r\n    ResponsiveEmbed,\r\n    Button,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Jumbotron,\r\n} from \"react-bootstrap\";\r\nimport Comment from \"./Comment\"\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction ReviewPage(props) {\r\n    const [thisReview, setThisReview] = useState(props.review);\r\n    const [refreshPage, setRefreshPage] = useState(true);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [content, setContent] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    \r\n    const { id } = useParams();\r\n\r\n    const queryReview = async () => {\r\n        const urlThisReview = \"https://rolling-car-review.herokuapp.com/api/reviews/\" + id;\r\n        try {\r\n            const getReview = await fetch(urlThisReview);\r\n            const resReview = await getReview.json();\r\n            setThisReview(resReview);\r\n        } catch (err) {\r\n            setError(err);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (refreshPage) {\r\n            queryReview();\r\n            setRefreshPage(false);\r\n        }\r\n    }, [refreshPage]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (username.trim() === \"\" || content.trim() === \"\") {\r\n            setError(true);\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                html: \"<h4>No puede dejar algún campo vacío</h4>\",\r\n                timer: 1500,\r\n                showConfirmButton: false,\r\n            });\r\n            return;\r\n        } else {\r\n            const dataToSend = { username, content };\r\n            try {\r\n                const urlReviews = \"https://rolling-car-review.herokuapp.com/api/reviews/\" + thisReview._id;\r\n                const header = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(dataToSend),\r\n                };\r\n                const result = await fetch(urlReviews, header);\r\n                const resultMsg = await result.json();\r\n\r\n                switch (result.status) {\r\n                    case 201:\r\n                        Swal.fire({\r\n                            icon: \"success\",\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false,\r\n                        });\r\n                        queryReview();\r\n                        props.history.push(\"/reviews/\" + thisReview._id);\r\n                        setUsername(\"\");\r\n                        setContent(\"\");\r\n                        break;\r\n                    case 403:\r\n                        Swal.fire({\r\n                            icon: \"warning\",\r\n                            title: resultMsg.msg,\r\n                            timer: 1500,\r\n                            showConfirmButton: false,\r\n                        });\r\n                        props.history.push(\"/\");\r\n                        break;\r\n                    default:\r\n                        Swal.fire({\r\n                            icon: \"error\",\r\n                            title: \"Error\",\r\n                            text: \"Algo pasó\",\r\n                            timer: 1500,\r\n                            showConfirmButton: false,\r\n                        });\r\n                        break;\r\n                }\r\n            } catch (error) {\r\n                Swal.fire(\r\n                    \"Ops...\",\r\n                    \"Ocurrió un error, intente nuevamente\",\r\n                    \"error\"\r\n                );\r\n                setError(true);\r\n            }\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    const deleteCategory = async (e) => {\r\n        e.preventDefault();\r\n        const dataToSend = thisReview;\r\n        \r\n        try {\r\n            const urlReviews = \"https://rolling-car-review.herokuapp.com/api/reviews/\" + thisReview._id;\r\n            const header = {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(dataToSend)\r\n            };\r\n            const result = await fetch(urlReviews, header);\r\n            const resultMsg = await result.json();\r\n\r\n            switch (result.status) {\r\n                case 200:\r\n                    Swal.fire({\r\n                        icon: \"success\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.queryCategories();\r\n                    props.history.push(\"/\");\r\n                    break;\r\n                case 404:\r\n                    Swal.fire({\r\n                        icon: \"warning\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.history.push(\"/\");\r\n                    break;\r\n                default:\r\n                    Swal.fire({\r\n                        icon: \"error\",\r\n                        title: \"Error\",\r\n                        text: \"Algo pasó\",\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            Swal.fire(\r\n                \"Ops...\",\r\n                \"Ocurrió un error, intente nuevamente\",\r\n                \"error\"\r\n            );\r\n            setError(true);\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Container>\r\n                <div className=\"text-center pt-5 pb-2 title-page\">\r\n                    <p className=\"display-3\">\r\n                        <b>{thisReview.title}</b>\r\n                    </p>\r\n                </div>\r\n            </Container>\r\n            <Container className=\"py-5\">\r\n                <ResponsiveEmbed aspectRatio=\"16by9\" className=\"shadow-lg\">\r\n                    <embed src={thisReview.url} />\r\n                </ResponsiveEmbed>\r\n            </Container>\r\n            <Container className=\"py-2\">\r\n                <Row>\r\n                    <Col sm={1}>\r\n                        <Button className=\"shadow\" size=\"sm\" variant=\"dark\" disabled>\r\n                            {thisReview.category.name}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col sm={11}>\r\n                        <Button variant=\"warning\" size=\"sm\">\r\n                            <span role=\"img\" aria-label=\"\" onClick={deleteCategory}>🗑️</span>\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Jumbotron className=\"py-3 shadow-sm\">\r\n                    <h3 className=\"pb-2\">Déjenos un comentario!</h3>\r\n                    <Form>\r\n                        <Form.Group as={Row} controlId=\"commentUsername\">\r\n                            <Form.Label column sm={2} size=\"sm\">\r\n                                Nombre:\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    size=\"sm\"\r\n                                    placeholder=\"Ej: ComandanteFort123\"\r\n                                    onChange={(e) => {\r\n                                        setUsername(e.target.value);\r\n                                    }}\r\n                                    value={username}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"commentContent\">\r\n                            <Form.Label column sm={2} size=\"sm\">\r\n                                Mensaje:\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    size=\"sm\"\r\n                                    placeholder=\"Escriba aquí su mensaje\"\r\n                                    rows={2}\r\n                                    onChange={(e) => {\r\n                                        setContent(e.target.value);\r\n                                    }}\r\n                                    value={content}\r\n                                />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Button type=\"submit\" variant=\"warning\" onClick={handleSubmit}>\r\n                            Comentar\r\n                        </Button>\r\n                    </Form>\r\n                </Jumbotron>\r\n            </Container>\r\n            {thisReview.comments.map((oneComment, pos) => {\r\n                return (\r\n                    <Comment \r\n                        key={pos} \r\n                        comment={oneComment}\r\n                        index={pos}\r\n                        queryReview={queryReview}\r\n                        idReview={thisReview._id}\r\n                        className=\"shadow-sm\"\r\n                    ></Comment>\r\n                );\r\n            })}\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default withRouter(ReviewPage);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\HomePage.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\CarrouselCategory.js",["58"],"import React, { useState } from \"react\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { Container, Image, Row, Col, Button } from \"react-bootstrap\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"../App.css\";\r\n\r\nfunction CarrouselCategory(props) {\r\n    const [error, setError] = useState(false);\r\n\r\n    const oneCategory = props.category;\r\n    const categoryReviews = oneCategory.reviews;\r\n\r\n    const deleteCategory = async (e) => {\r\n        e.preventDefault();\r\n        const dataToSend = oneCategory;\r\n        \r\n        try {\r\n            const urlReviews = \"https://rolling-car-review.herokuapp.com/api/categories/\" + oneCategory.id;\r\n            const header = {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(dataToSend)\r\n            };\r\n            const result = await fetch(urlReviews, header);\r\n            const resultMsg = await result.json();\r\n\r\n            switch (result.status) {\r\n                case 200:\r\n                    Swal.fire({\r\n                        icon: \"success\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.queryCategories();\r\n                    props.history.push(\"/\");\r\n                    break;\r\n                case 404:\r\n                    Swal.fire({\r\n                        icon: \"warning\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.history.push(\"/\");\r\n                    break;\r\n                default:\r\n                    Swal.fire({\r\n                        icon: \"error\",\r\n                        title: \"Error\",\r\n                        text: \"Algo pasó\",\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            Swal.fire(\r\n                \"Ops...\",\r\n                \"Ocurrió un error, intente nuevamente\",\r\n                \"error\"\r\n            );\r\n            setError(true);\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    const settings = {\r\n        className: \"center py-2\",\r\n        centerMode: true,\r\n        infinite: oneCategory.reviews.length > 3,\r\n        centerPadding: \"60px\",\r\n        slidesToShow: 3,\r\n        speed: 500,\r\n        rows: 1,\r\n        swipeToSlide: true,\r\n        responsive: [\r\n            {\r\n                breakpoint: 1024,\r\n                settings: {\r\n                    slidesToShow: 3\r\n                },\r\n            },\r\n            {\r\n                breakpoint: 600,\r\n                settings: {\r\n                    slidesToShow: 2,\r\n                    slidesToScroll: 2,\r\n                    initialSlide: 2,\r\n                },\r\n            },\r\n            {\r\n                breakpoint: 480,\r\n                settings: {\r\n                    slidesToShow: 1,\r\n                    slidesToScroll: 1,\r\n                },\r\n            },\r\n        ]\r\n    };\r\n    \r\n    return (\r\n        <Container className=\"my-4 py-3 px-5 bg-dark carrouselCategory shadow-lg\">\r\n            <Row>\r\n                <Col sm={11}>\r\n                    <h1 className=\"title-category\">{oneCategory.name}</h1>\r\n                </Col>\r\n                <Col sm={1}>\r\n                    <Button variant=\"danger\" size=\"sm\">\r\n                        <span role=\"img\" aria-label=\"\" onClick={deleteCategory}>🗑️</span>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Slider {...settings}>\r\n                {categoryReviews.map((review, pos) => {\r\n                    return (\r\n                        <div key={pos} className=\"px-3 imgCategory\">\r\n                            <Link to={`/reviews/${review._id}`}>\r\n                                <Image src={review.thumbnail} title={review.title} alt={\"imgReview\" + pos} thumbnail/>\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </Slider>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default withRouter(CarrouselCategory);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\Comment.js",["59","60","61"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Container, Row, Col, Jumbotron, Button } from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction Comment(props) {\r\n    const [comment, setComment] = useState(props.comment);\r\n    const [error, setError] = useState(false);\r\n\r\n    const deleteComment = async (e) => {\r\n        e.preventDefault();\r\n        const dataToSend = comment;\r\n\r\n        try {\r\n            const urlReviews = \"https://rolling-car-review.herokuapp.com/api/comments/\" + comment._id;\r\n            const header = {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(dataToSend)\r\n            };\r\n            const result = await fetch(urlReviews, header);\r\n            const resultMsg = await result.json();\r\n\r\n            switch (result.status) {\r\n                case 200:\r\n                    Swal.fire({\r\n                        icon: \"success\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.queryReview();\r\n                    props.history.push(\"/reviews/\" + props.idReview);\r\n                    break;\r\n                case 404:\r\n                    Swal.fire({\r\n                        icon: \"warning\",\r\n                        title: resultMsg.msg,\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    props.history.push(\"/\");\r\n                    break;\r\n                default:\r\n                    Swal.fire({\r\n                        icon: \"error\",\r\n                        title: \"Error\",\r\n                        text: \"Algo pasó\",\r\n                        timer: 1500,\r\n                        showConfirmButton: false,\r\n                    });\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            Swal.fire(\r\n                \"Ops...\",\r\n                \"Ocurrió un error, intente nuevamente\",\r\n                \"error\"\r\n            );\r\n            setError(true);\r\n        }\r\n        setError(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Jumbotron className=\"py-3\">\r\n                    <Row>\r\n                        <Col sm={2}>\r\n                            <Row><b>#{props.index+1} - {comment.username}</b></Row>\r\n                            <Row>{comment.createdAt.substring(0,10)}</Row>\r\n                            {/* <Row>{comment.createdAt.substring(11,19)}</Row> */}\r\n                        </Col>\r\n                        <Col sm={9}>{comment.content}</Col>\r\n                        <Col sm={1}>\r\n                            <Button variant=\"danger\" size=\"sm\" onClick={deleteComment}>\r\n                                <span role=\"img\" aria-label=\"\">🗑️</span>\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Jumbotron>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Comment);\r\n","C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Footer.js",[],"C:\\Users\\franc\\Documents\\RollingCarReview\\rcr-frontend\\src\\components\\common\\Error404.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":16,"column":12,"nodeType":"68","messageId":"69","endLine":16,"endColumn":18},{"ruleId":"66","severity":1,"message":"70","line":8,"column":12,"nodeType":"68","messageId":"69","endLine":8,"endColumn":17},{"ruleId":"66","severity":1,"message":"70","line":16,"column":12,"nodeType":"68","messageId":"69","endLine":16,"endColumn":17},{"ruleId":"66","severity":1,"message":"70","line":20,"column":12,"nodeType":"68","messageId":"69","endLine":20,"endColumn":17},{"ruleId":"71","severity":1,"message":"72","line":40,"column":8,"nodeType":"73","endLine":40,"endColumn":21,"suggestions":"74"},{"ruleId":"66","severity":1,"message":"70","line":11,"column":12,"nodeType":"68","messageId":"69","endLine":11,"endColumn":17},{"ruleId":"66","severity":1,"message":"75","line":1,"column":27,"nodeType":"68","messageId":"69","endLine":1,"endColumn":36},{"ruleId":"66","severity":1,"message":"76","line":7,"column":21,"nodeType":"68","messageId":"69","endLine":7,"endColumn":31},{"ruleId":"66","severity":1,"message":"70","line":8,"column":12,"nodeType":"68","messageId":"69","endLine":8,"endColumn":17},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'queryReview'. Either include it or remove the dependency array.","ArrayExpression",["79"],"'useEffect' is defined but never used.","'setComment' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [queryReview, refreshPage]",{"range":"82","text":"83"},[1175,1188],"[queryReview, refreshPage]"]